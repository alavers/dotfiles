# zfetch is a tiny plugin manager
autoload -U "$DOTFILES/zsh/functions/zfetch"

# initialize autocomplete
autoload -U compinit add-zsh-hook
compinit

autoload -U edit-command-line
zle -N edit-command-line 


export GPG_TTY=$(tty)
export SHELL=$(which zsh)
export PATH=$HOME/Library/Android/sdk/platform-tools:$PATH
export PATH=$HOME/.local/bin:$PATH
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
export CLICOLOR=1 # ls colors
export PATH=$(pyenv root)/shims:$PATH
export CLOUDSDK_PYTHON=python3

# export JAVA_HOME=$(/usr/libexec/java_home -v 11) 
# export JAVA_HOME=$(/usr/libexec/java_home -v 17) 
# export PATH=$JAVA_HOME/bin:$PATH

export PATH=/opt/nvim/bin:$PATH

# rbenv init already does this 
# export PATH=$HOME/.rbenv/shims:$PATH

## java 11
# export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"


# make tmux-256color work
# https://gpanders.com/blog/the-definitive-guide-to-using-tmux-256color-on-macos/
export TERMINFO_DIRS=$TERMINFO_DIRS:$HOME/.local/share/terminfo

# env vars
if [ -e ~/.vars ];then
    source ~/.vars
fi

########################################################
# Aliases
########################################################

alias vim='lvim'
alias vimdiff='nvim -d'


# git aliases https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git
alias gd="git diff"
alias gdca="git diff --cached"
alias cleanbranches='git branch --merged | grep -v "\*" | grep -v master | grep -v dev | xargs -n 1 git branch -d'

# docker aliases
alias dps="docker ps --format \"table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}\""
alias dpsa="docker ps -a --format \"table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\""

# kubectl aliases

# common aliases https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/common-aliases/common-aliases.plugin.zsh
alias l='ls -lFh'     #size,show type,human readable
alias la='ls -lAFh'   #long list,show almost all,show type,human readable
alias lr='ls -tRFh'   #sorted by date,recursive,show type,human readable
alias lt='ls -ltFh'   #long list,sorted by date,show type,human readable
alias ll='ls -l'      #long list
alias ldot='ls -ld .*'

alias zshrc='${=EDITOR} $DOTFILES/zsh/zshrc.symlink' # Quick access to the .zshrc file

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

########################################################
# Zsh options https://zsh.sourceforge.io/Guide/zshguide02.html
########################################################

# display how long all tasks over 10 seconds take
export REPORTTIME=10
export KEYTIMEOUT=1              # 10ms delay for key sequences

setopt NO_BG_NICE
setopt NO_HUP                    # don't kill background jobs when the shell exits
setopt NO_LIST_BEEP
setopt LOCAL_OPTIONS
setopt LOCAL_TRAPS
setopt PROMPT_SUBST

# history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt EXTENDED_HISTORY          # write the history file in the ":start:elapsed;command" format.
setopt HIST_REDUCE_BLANKS        # remove superfluous blanks before recording entry.
setopt SHARE_HISTORY             # share history between all sessions.
setopt HIST_IGNORE_ALL_DUPS      # delete old recorded entry if new entry is a duplicate.
setopt COMPLETE_ALIASES

# set -o vi

########################################################
# Bindings
########################################################

# make terminal command navigation sane again
bindkey '^X^E' edit-command-line
bindkey "^[[1;5C" forward-word                      # [Ctrl-right] - forward one word
bindkey "^[[1;5D" backward-word                     # [Ctrl-left] - backward one word
bindkey '^[^[[C' forward-word                       # [Ctrl-right] - forward one word
bindkey '^[^[[D' backward-word                      # [Ctrl-left] - backward one word
bindkey '^[[1;3D' beginning-of-line                 # [Alt-left] - beginning of line
bindkey '^[[1;3C' end-of-line                       # [Alt-right] - end of line
bindkey '^[[5D' beginning-of-line                   # [Alt-left] - beginning of line
bindkey '^[[5C' end-of-line                         # [Alt-right] - end of line
bindkey '^?' backward-delete-char                   # [Backspace] - delete backward
if [[ "${terminfo[kdch1]}" != "" ]]; then
    bindkey "${terminfo[kdch1]}" delete-char        # [Delete] - delete forward
else
    bindkey "^[[3~" delete-char                     # [Delete] - delete forward
    bindkey "^[3;5~" delete-char
    bindkey "\e[3~" delete-char
fi
bindkey "^A" vi-beginning-of-line
bindkey -M viins "^F" vi-forward-word               # [Ctrl-f] - move to next word
bindkey -M viins "^E" vi-add-eol                    # [Ctrl-e] - move to end of line
bindkey -M viins "^U" backward-kill-line            # [Ctrl-u] - delete before cursor
bindkey "^P" up-line-or-search                      # [Ctrl-p] - previous commands
bindkey "^N" down-line-or-search                    # [Ctrl-n] - next command
bindkey "^J" history-beginning-search-forward
bindkey "^K" history-beginning-search-backward
bindkey '^g' clear-screen

########################################################
# Util functions
########################################################
#

# pretty unix timestamp
function tz {
    TZ=Canada/Eastern date -r $1
}

# get current unix timetamp
function ts {
    echo $(date +%s)
}

function swap()         
{
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

function keys() {
    eval `ssh-agent -s`
    ssh-add --apple-use-keychain ~/.ssh/alavers@system42.net
    ssh-add --apple-use-keychain ~/.ssh/alavers@zendesk.com
}

# Mocha in watch mode has a bug that hides the cursor. This restores it.
function c {
  echo "\x1B[?25h"
}

function mw {
    npm run mocha:watch -- --grep "$*"
}

########################################################
# Lazy loading, node, ruby, python
########################################################

# fnm = fast node version manager
# if [[ -x "$(command -v fnm)" ]]; then
#     eval "$(fnm env --use-on-cd)"
# fi

eval "$(fnm env --use-on-cd)"
eval "$(jenv init -)"

# https://gist.github.com/QinMing/364774610afc0e06cc223b467abe83c0
lazy_load() {
    # Act as a stub to another shell function/command. When first run, it will load the actual function/command then execute it.
    # E.g. This made my zsh load 0.8 seconds faster by loading `nvm` when "nvm", "npm" or "node" is used for the first time
    # $1: space separated list of alias to release after the first load
    # $2: file to source
    # $3: name of the command to run after it's loaded
    # $4+: argv to be passed to $3
    echo "Lazy loading $1 ..."

    # $1.split(' ') using the s flag. In bash, this can be simply ($1) #http://unix.stackexchange.com/questions/28854/list-elements-with-spaces-in-zsh
    # Single line won't work: local names=("${(@s: :)${1}}"). Due to http://stackoverflow.com/questions/14917501/local-arrays-in-zsh   (zsh 5.0.8 (x86_64-apple-darwin15.0))
    local -a names
    if [[ -n "$ZSH_VERSION" ]]; then
        names=("${(@s: :)${1}}")
    else
        names=($1)
    fi
    unalias "${names[@]}"
    $2
    shift 2
    $*
}

group_lazy_load() {
    local script
    script=$1
    shift 1
    for cmd in "$@"; do
        alias $cmd="lazy_load \"$*\" $script $cmd"
    done
}

eval "$(rbenv init -)"

# init_rbenv() {
#   eval "$(rbenv init -)"
# }
#
# Lazy load rbenv
# group_lazy_load init_rbenv rbenv ruby tmuxinator irb rake rails bundle scooter
group_lazy_load rbenv ruby tmuxinator irb rake rails bundle scooter

# Lazy load pyenv
pyenv() {
    eval "$(command pyenv init -)"
    pyenv "$@"
}

# FZF shell keybindings (CTRL-R and CTRL-T)
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS="--extended"

# Initialize fasd, needed for z to work
fasd_cache="$HOME/.fasd-init-zsh"
if [ "$(command -v fasd)" -nt "$fasd_cache" -o ! -s "$fasd_cache" ]; then
  fasd --init posix-alias zsh-hook >| "$fasd_cache"
fi
source "$fasd_cache"
unset fasd_cache

########################################################
# Completion settings
########################################################

# matches case insensitive for lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

# default to file completion
zstyle ':completion:*' completer _expand _complete _files _correct _approximate

# kubectl completion (disabled because kubectl_stuff does this already)
# source <(kubectl completion zsh)

# zendesk kubectl shell stuff
if [ -e $ZENDESK_CODE_DIR/kubectl_config ];then
  source $ZENDESK_CODE_DIR/kubectl_config/dotfiles/kubectl_stuff.bash
fi

# alias podver="kubectl get pods -o=jsonpath='{range .items[*]}{\"\n\"}{.metadata.name}{\":\t\t\t\t\"}{range .spec.containers[*]}{.image}{\", \"}{end}{end}' | sort"
# alias k8s-get-pod-uptime='(echo '\''POD_NAME BOOT_DATE'\''; kubectl get pods -o=jsonpath='\''{range .items[*]}{.metadata.name}{"\t"}{.status.containerStatuses[*].state.running.startedAt}{"\n"}{end}'\'' | sort -k2) | column -t'
# alias k='kubectl "--context=${KUBECTL_CONTEXT:-$(kubectl config current-context)}" ${KUBECTL_NAMESPACE/[[:alnum:]-]*/--namespace=${KUBECTL_NAMESPACE}}'
# complete -o default -F __start_kubectl k
alias k=kubectl

# Google cloud SDK completion
source "`brew --prefix`/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
source "`brew --prefix`/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"


########################################################
# Plugins
########################################################

export ZPLUGDIR="$CACHEDIR/zsh/plugins"
[[ -d "$ZPLUGDIR" ]] || mkdir -p "$ZPLUGDIR"
# array containing plugin information (managed by zfetch)
typeset -A plugins

zfetch mafredri/zsh-async async.plugin.zsh
zfetch zsh-users/zsh-autosuggestions
zfetch zsh-users/zsh-syntax-highlighting
zfetch Aloxaf/fzf-tab

source "$DOTFILES/zsh/utils.zsh"
source "$DOTFILES/zsh/prompt.zsh"

if [[ -a ~/.localrc ]]; then
    source ~/.localrc
fi

# gh completion
eval "$(gh completion -s zsh)"
# BEGIN ZDI
export DOCKER_FOR_MAC_ENABLED=true
source /Users/alavers/Code/zendesk/zdi/dockmaster/zdi.sh
# END ZDI

eval "$(direnv hook zsh)"


# scooter completion
if [ -e $ZENDESK_CODE_DIR/scooter ];then
  source $ZENDESK_CODE_DIR/scooter/scripts/shell/scooter.sh
fi
